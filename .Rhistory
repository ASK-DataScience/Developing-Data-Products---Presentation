data(olive)
olive = olive[,-1]
head(olive)
dim(olive)
set.seed(125)
modelFit.olive <- train(Area ~ ., data = olive, method = "rpart")
plot(modelFit.olive$finalModel)
text(modelFit.olive$finalModel)
newdata = as.data.frame(t(colMeans(olive)))
predict(modelFit.olive, newdata = newdata)
str(olive)
newdata
predict(modelFit.olive, newdata = newdata[,-1])
newdata[,-1]
olive$Area
plot(modelFit.olive$finalModel)
text(modelFit.olive$finalModel)
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
str(trainSA)
set.seed(13234)
modelFit.heart <- train(chd ~ age+alcohol+obesity+tobacco+typea+ldl,
data = trainSA, method = "glm", family = "binomial")
dim(testSA)
predictions <- predict(modelFit.heart, testSA[,-10] )
missClass(testSA$chd,predictions)
missClass = function(values,prediction){
sum(((prediction > 0.5)*1) != values)/length(values)}
missClass(testSA$chd,predictions)
missClass(trainSA$chd,predictions)
missClass(testSA$chd,predictions)
predictions.train <- predict(modelFit.heart, trainSA[,-10] )
missClass(trainSA$chd,predictions.train)
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
head(vowel.train)
str(vowel.train)
vowel.train$y <- as.factor(vowel.train$y)
str(vowel.train)
vowel.test$y <- as.factor(vowel.test$y)
str(vowel.test)
modelFit.vowel <- train(y ~ ., data = vowel.train, method = "rf")
modelFit.vowel
varImp(modelFit.vowel)
set.seed(125)
modelFit <- train(Class ~ ., data = training, method = "rpart")
plot(modelFit$finalModel)
text(modelFit$finalModel)
modelFit2<-rpart(Class ~ ., data = training, method="class")
plot(modelFit2$finalModel)
text(modelFit2$finalModel)
plot(modelFit2)
text(modelFit2)
training[1,1]
head(training)
AppliedPredictiveModeling)
data(segmentationOriginal)
library(car
et)
library(caret)
training <- subset(segmentationOriginal, Case = "Train")
testing <- subset(segmentationOriginal, Case = "Test")
head(training)
training <- subset(segmentationOriginal, Case == "Train")
testing <- subset(segmentationOriginal, Case == "Test")
head(training)
set.seed(125)
modelFit <- train(Class ~ ., data = training, method = "rpart")
plot(modelFit$finalModel)
text(modelFit$finalModel)
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
vowel.train$y <- as.factor(vowel.train$y)
vowel.test$y <- as.factor(vowel.test$y)
set.seed(33833)
RF <- train(y ~ ., data = vowel.train, method = "rf")
GBM <- train(y ~ ., data = vowel.train, method = "gbm")
library (caret)
set.seed(33833)
RF <- train(y ~ ., data = vowel.train, method = "rf")
GBM <- train(y ~ ., data = vowel.train, method = "gbm")
GBM
head(vowel.test)
RFPred <- (RF, vowel.test[,-1])
RF
RFPred <- (RF, vowel.test[,-1])
RFPred <- predict(RF, vowel.test[,-1])
GBMPred <- predict(GBM, vowel.test[,-1])
RFAcc <- accuracy (RF, vowel.test)
table(RFPred,vowel.test$y)
table(GBMPred,vowel.test$y)
length(vowel.test$y)
equalRFTest <- RFPred == vowel.test$y
AccRFTest <- equalRFTest/length(vowel.test$y)
AccRFTest
equalRFTest <- sum(RFPred == vowel.test$y)
AccRFTest <- equalRFTest/length(vowel.test$y)
AccRFTest
equalGBMTest <- sum(GBMPred == vowel.test$y)
AccGBMTest <- equalGBMTest/length(vowel.test$y)
AccGBMTest
equalAgreeTest <- sum(GBMPred == RFPred)
AccAgreeTest <- equalAgreeTest/length(vowel.test$y)
AccAgreeTest
equalAgreeTest <- sum((GBMPred == RFPred)==vowel.test$y )
AccAgreeTest <- equalAgreeTest/length(vowel.test$y)
AccAgreeTest
equalAgreeTest <- sum(GBMPred == RFPred)
AccAgreeTest <- equalAgreeTest/length(vowel.test$y)
AccAgreeTest
library(caret)
library(gbm)
set.seed(3433)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
set.seed(62433)
AlzRF <- train(diagnosis  ~ ., data = training, method = "rf")
AlzGBM <- train(diagnosis  ~ ., data = training, method = "gbm")
AlzLDA <- train(diagnosis  ~ ., data = training, method = "lda")
RFPred <- predict(AlzRF, testing[,-1])
GBMPred <- predict(AlzGBM, testing[,-1])
LDAPred <- predict(AlzLDA, testing[,-1])
equalRFTest <- sum(RFPred == testing$diagnosis)
AccRFTest <- equalRFTest/length(testing$diagnosis)
equalGBMTest <- sum(GBMPred == testing$diagnosis)
AccGBMTest <- equalGBMTest/length(testing$diagnosis)
equalLDATest <- sum(LDAPred == testing$diagnosis)
AccLDATest <- equalLDATest/length(testing$diagnosis)
AccRFTest
AccGBMTest
AccLDATest
prediction.matrix <- data.frame(RFPred, GBMPred, LDAPred, Diagnosis = testing$diagnosis)
modelStacked <- train(Diagnosis ~ ., data = prediction.matrix, method = "rf")
StackPred <- predict(modelStacked, testing[,-1])
equalStackTest <- sum(StackPred == testing$diagnosis)
AccStackTest <- equalStackTest/length(testing$diagnosis)
AccStackTest
prediction.matrix <- data.frame(RFPred, GBMPred, LDAPred, Diagnosis = training$diagnosis)
modelStacked <- train(Diagnosis ~ ., data = prediction.matrix, method = "rf")
head(concrete)
set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
head(concrete)
set.seed(233)
LASSO <- train(CompressiveStrength  ~ ., data = training, method = "lasso")
LASSO
?plot.enet
plot(LASSO,xvar="step")
plot(LASSO,xvar="penalty")
plot(LASSO,xvar="L1norm")
plot(LASSO,xvar="L1norm")
plot(LASSO,xvar="penalty")
plot(LASSO,xvar="step")
plot(LASSO,xvar="step")
plot(LASSO,xvar="penalty")
plot(LASSO,xvar="L1norm")
plot(LASSO,xvar="step")
plot(LASSO,xvar=penalty)
plot(LASSO,xvar="penalty")
plot(LASSO,xvar="step")
plot(LASSO,xvar="fraction")
plot(LASSO,xvar="step")
LASSO$finalModel
plot(LASSO$finalModel,xvar="fraction")
plot(LASSO$finalModel,xvar="penalty")
plot(LASSO$finalModel,xvar="penalty", use.color = TRUE)
head(concrete)
library(lubridate)  # For year() function below
dat = read.csv("gaData.csv")
training = dat[year(dat$date) < 2012,]
testing = dat[(year(dat$date)) > 2011,]
tstrain = ts(training$visitsTumblr)
install.packages("lubridate")
library(lubridate)  # For year() function below
dat = read.csv("gaData.csv")
training = dat[year(dat$date) < 2012,]
testing = dat[(year(dat$date)) > 2011,]
tstrain = ts(training$visitsTumblr)
tstrain
library(forecast)
install.packages("forecast")
library(forecast)
modFit <- bats(tstrain)
fcast <- forcast(modFit, h = 235, level = 95)
fcast <- forecast(modFit, h = 235, level = 95)
fcast
plot(fcast)
lines(testing, col = "red")
library(e1071)
set.seed(325)
model <- svm(CompressiveStrength ~ ., data = training)
set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
training = concrete[ inTrain,]
testing = concrete[-inTrain,]
library(e1071)
set.seed(325)
model <- svm(CompressiveStrength ~ ., data = training)
head(testing)
head(testing[,9])
pred <- predict(model, testing[,-9])
table(pred, testing$CompressiveStrength)
model
mean(1,2,3)
RMSE <- sqrt(mean((pred - testing$CompressiveStrength)^2))
RMSe
RMSE
fcast
length(testing)
library(lubridate)  # For year() function below
dat = read.csv("gaData.csv")
training = dat[year(dat$date) < 2012,]
testing = dat[(year(dat$date)) > 2011,]
tstrain = ts(training$visitsTumblr)
library(forecast)
modFit <- bats(tstrain)
fcast <- forecast(modFit, h = 235, level = 95)
plot(fcast)
lines(testing, col = "red")
dim(testing)
accuracy(fcast, testing)
head(testing)
accuracy(fcast, testing$visitsTumblr)
plot(fcast)
lines(testing$visitsTumblr, col = "red")
head(fcast)
fcast
fcast[1:10,3]
fcast[,3]
str(fcast)
fcast$lower
fcast$upper
length(testing$visitsTumblr)
per <- sum((testing$visitsTumblr > fcast$lower) & (testing$visitsTumblr < fcast$upper))/length(testing$visitsTumblr)*100
per
RFPred <- predict(AlzRF, testing[,-1])
GBMPred <- predict(AlzGBM, testing[,-1])
LDAPred <- predict(AlzLDA, testing[,-1])
equalRFTest <- sum(RFPred == testing$diagnosis)
AccRFTest <- equalRFTest/length(testing$diagnosis)
equalGBMTest <- sum(GBMPred == testing$diagnosis)
AccGBMTest <- equalGBMTest/length(testing$diagnosis)
equalLDATest <- sum(LDAPred == testing$diagnosis)
AccLDATest <- equalLDATest/length(testing$diagnosis)
library(caret)
library(gbm)
set.seed(3433)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
training = adData[ inTrain,]
testing = adData[-inTrain,]
RFPred <- predict(AlzRF, testing[,-1])
GBMPred <- predict(AlzGBM, testing[,-1])
LDAPred <- predict(AlzLDA, testing[,-1])
equalRFTest <- sum(RFPred == testing$diagnosis)
AccRFTest <- equalRFTest/length(testing$diagnosis)
equalGBMTest <- sum(GBMPred == testing$diagnosis)
AccGBMTest <- equalGBMTest/length(testing$diagnosis)
equalLDATest <- sum(LDAPred == testing$diagnosis)
AccLDATest <- equalLDATest/length(testing$diagnosis)
AccRFTest
AccGBMTest
AccLDATest
AccStackTest
library(lubridate)  # For year() function below
dat = read.csv("gaData.csv")
training = dat[year(dat$date) < 2012,]
testing = dat[(year(dat$date)) > 2011,]
tstrain = ts(training$visitsTumblr)
library(forecast)
modFit <- bats(tstrain)
fcast <- forecast(modFit, h = 235, level = 95)
plot(fcast)
lines(testing$vis
itsTumblr, col = "red")
lines(testing$visitsTumblr, col = "red")
head(testing)
lines(,testing$X, testing$visitsTumblr, col = "red")
lines(testing$X, testing$visitsTumblr, col = "red")
plot(fcast)
lines(testing$X, testing$visitsTumblr, col = "red")
library(googleVis)
install.packages("googleVis")
install.packages("googleVis")
install_github("ropensci/plotly")
librar(devtools)
library(devtools)
library(Rtools)
find_rtools()
library(rtools)
install.packages("rtools")
require*rCharts
require(rCharts)
height = 600> </iframe>')
cat('<iframe src = "fig/n1.html" width = 100%, height = 600> </iframe>')
require (rCharts)
haireye = as.data.frame (HairEyeColor)
n1 <- nPlot (Freq ~ Hair, group = 'Eye',
type = 'multiBarChart',
date = subset(haireye, sex == 'Male')
)
n1$save ('fig/n1.html',cdn = TRUE)
cat('<iframe src = "fig/n1.html" width = 100%, height = 600> </iframe>')
n1 <- nPlot (Freq ~ Hair, group = 'Eye',
type = 'multiBarChart',
data = subset(haireye, sex == 'Male')
)
head(haireye)
n1 <- nPlot (Freq ~ Hair, group = 'Eye',
type = 'multiBarChart',
data = subset(haireye, Sex == 'Male')
)
n1$save ('fig/n1.html',cdn = TRUE)
getwd9
getwd()
n1$save ('fig/n1.html',cdn = TRUE)
cat('<iframe src = "fig/n1.html" width = 100%, height = 600> </iframe>')
n1
?nPlot
??nPlot
n1 <- nplot (Freq ~ Hair, group = 'Eye',
type = 'multiBarChart',
data = subset(haireye, Sex == 'Male')
)
n1 <- nPlot (Freq ~ Hair, group = 'Eye',
type = 'multiBarChart',
data = subset(haireye, Sex == 'Male')
)
n1
n1
nPlot (Freq ~ Hair, group = 'Eye',
type = 'multiBarChart',
data = subset(haireye, Sex == 'Male')
)
n1$html()
librrary(rCharts)
library(rCharts)
head(iris)
require (rCharts)
names(iris) = gsub("\\.","",names(iris))
r1 <- rPlot (SepalLength ~ SepalWidth|Species,
data = iris, color = 'Species', type = 'point')
r1$save ('fig/r1.html',cdn = TRUE)
cat('<iframe src = "fig/r1.html" width = 100%, height = 600> </iframe>')
r1
??rPlot
??rplot
r1 <- rplot (SepalLength ~ SepalWidth|Species,
data = iris, color = 'Species', type = 'point')
r1$save ('fig/r1.html',cdn = TRUE)
require (rCharts)
haireye = as.data.frame (HairEyeColor)
r2 <- rPlot (Freq ~ Hair|Eye, color = 'Eye'
type = 'bar',
data = haireye)
r2$save ('fig/r2.html',cdn = TRUE)
cat('<iframe src = "fig/r2.html" width = 100%, height = 600> </iframe>')
require (rCharts)
haireye = as.data.frame (HairEyeColor)
r2 <- rPlot (Freq ~ Hair|Eye, color = 'Eye'
type = 'bar', data = haireye)
r2 <- rPlot (Freq ~ Hair|Eye, color = 'Eye',
type = 'bar', data = haireye)
r2$save ('fig/r2.html',cdn = TRUE)
cat('<iframe src = "fig/r2.html" width = 100%, height = 600> </iframe>')
r2
r2$print("Chart 1")
r2$publish('myPlot', host = 'gist')
r2$publish('myPlot', host = 'rpubs')
data(economics, package = "ggplot2")
econ <- transform (economics, date = as.character(date))
m1 <- mPlot(x = "data", y = c("psavert","uempmed"),
type = "Line", data = econ)
m1$set(pointSize = 0, lineWidth = 1)
m1$save ('fig/m1.html', cdn = TRUE)
cat('<iframe src = "fig/m1.html" width = 100%, height = 600> </iframe>')
m1
require (reshape2)
uspexp <- melt (USPersonalExpenditure)
names(uspexp)[1:2] = c("category", "year")
x1 <- xPlot(value ~ year, group = "category",
data = uspexp, type = "line-dotted")
x1$save ('fig/x1.html', cdn = TRUE)
cat('<iframe src = "fig/x1.html" width = 100%, height = 600> </iframe>')
x1
map3 <- Leaflet$new()
map3$setView(c(51.505,-0.09), zoom = 13)
map3$marker(c(51.5,-0.09), bindpopup = "<p> Hi, I am a popup </p>")
map3$marker(c(51.495,-0.083), bindpopup = "<p> Hi, I am another popup </p>")
map3$save("fig/map3.html", cdn = TRUE)
cat('<iframe src = "fig/map3.html" width = 100%, height = 600> </iframe>')
map3
usp = reshape2::melt(USPersonalExpenditure)
# get the decades into a date Rickshaw likes
usp$Var2 <- as.numeric(as.POSIXCT (paste0(usp$Var2, "-01-01")))
usp$Var2 <- as.numeric(as.POSIXct (paste0(usp$Var2, "-01-01")))
p4 <- Rickshaw$new()
head(usp)
head(USPersonalExpenditure)
usp = reshape2::melt(USPersonalExpenditure)
head(usp)
usp$Var2 <- as.numeric(as.POSIXct (paste0(usp$Var2, "-01-01")))
p4 <- Rickshaw$new()
p4$layer(value ~ Var2, group = "Var1", data = usp, type = "area", width = 560)
p4
p4$set(slider = TRUE)
p4$save('fig/p4.html', cdn = TRUE)
cat('<iframe src = "fig/p4.html" width = 100%, height = 600> </iframe>')
p4
h1 <- hPlot (x = "Wr.Hnd", y = "NW.Hnd",
data = MASS::survey, type = c("line", "bubble", "scatter"),
group = "Clap", size = "Age")
h1$save('fig/h1.html', cdn = TRUE)
cat('<iframe src = "fig/h1.html" width = 100%, height = 600> </iframe>')
h1
require (rCharts)
haireye = as.data.frame (HairEyeColor)
n1 <- nPlot (Freq ~ Hair, group = 'Eye',
type = 'multiBarChart',
data = subset(haireye, Sex == 'Male')
)
n1$save ('fig/n1.html',cdn = TRUE)
cat('<iframe src = "fig/n1.html" width = 100%, height = 600> </iframe>')
n1
require (rCharts)
names(iris) = gsub("\\.","",names(iris))
r1 <- rPlot (SepalLength ~ SepalWidth|Species,
data = iris, color = 'Species', type = 'point')
r1$save ('fig/r1.html',cdn = TRUE)
cat('<iframe src = "fig/r1.html" width = 100%, height = 600> </iframe>')
r1
require (rCharts)
haireye = as.data.frame (HairEyeColor)
r2 <- rPlot (Freq ~ Hair|Eye, color = 'Eye',
type = 'bar', data = haireye)
r2$save ('fig/r2.html',cdn = TRUE)
cat('<iframe src = "fig/r2.html" width = 100%, height = 600> </iframe>')
r2
r2$print("Chart 1")
r2$publish('myPlot', host = 'gist')
r2$publish('myPlot', host = 'rpubs')
r2$publish('myPlot', host = 'rpubs',
method = getOption("rpubs.upload.method", "auto"))
r2$publish('myPlot', host = 'rpubs',
method = getOption("rpubs.upload.method", "internal"))
data(economics, package = "ggplot2")
econ <- transform (economics, date = as.character(date))
m1 <- mPlot(x = "data", y = c("psavert","uempmed"),
type = "Line", data = econ)
m1$set(pointSize = 0, lineWidth = 1)
m1$save ('fig/m1.html', cdn = TRUE)
cat('<iframe src = "fig/m1.html" width = 100%, height = 600> </iframe>')
m1
require (reshape2)
uspexp <- melt (USPersonalExpenditure)
names(uspexp)[1:2] = c("category", "year")
x1 <- xPlot(value ~ year, group = "category",
data = uspexp, type = "line-dotted")
x1$save ('fig/x1.html', cdn = TRUE)
cat('<iframe src = "fig/x1.html" width = 100%, height = 600> </iframe>')
x1
map3 <- Leaflet$new()
map3$setView(c(51.505,-0.09), zoom = 13)
map3$marker(c(51.5,-0.09), bindpopup = "<p> Hi, I am a popup </p>")
map3$marker(c(51.495,-0.083), bindpopup = "<p> Hi, I am another popup </p>")
map3$save("fig/map3.html", cdn = TRUE)
cat('<iframe src = "fig/map3.html" width = 100%, height = 600> </iframe>')
map3
h1 <- hPlot (x = "Wr.Hnd", y = "NW.Hnd",
data = MASS::survey, type = c("line", "bubble", "scatter"),
group = "Clap", size = "Age")
h1$save('fig/h1.html', cdn = TRUE)
cat('<iframe src = "fig/h1.html" width = 100%, height = 600> </iframe>')
h1
??rCharts
getwd()
setwd("C:/Users/Alia Khaled/Documents/Coursera/DDP-Project-Shiny")
deployApp()
library(shinyapps)
deployApp()
setwd("C:/Users/Alia Khaled/Documents/Coursera/DDP-Project-Slidify/MPG-Prediction")
publish(title = 'Predicting MPG', 'index.html', host = 'rpubs')
library(slidify)
publish(title = 'Predicting MPG', 'index.html', host = 'rpubs')
publish(title = 'Predicting MPG', 'index.html', host = 'rpubs', method = getOption("rpubs.upload.method", "internal"))
publish(title = 'Predicting MPG', 'index.html', host = 'rpubs')
publish(title = 'Predicting MPG', 'index.html', host = 'rpubs')
options(rpubs.upload.method = "internal")
publish(title = 'Predicting MPG', 'index.html', host = 'rpubs')
options(rpubs.upload.method = "internal")
options(RCurlOptions = list(verbose = FALSE, capath = system.file("CurlSSL", "cacert.pem", package = "RCurl"), ssl.verifypeer = FALSE))
library("bitops", lib.loc="C:/Program Files/R/R-3.1.1/library")
library("RCurl", lib.loc="C:/Program Files/R/R-3.1.1/library")
publish(title = 'Predicting MPG', 'index.html', host = 'rpubs')
